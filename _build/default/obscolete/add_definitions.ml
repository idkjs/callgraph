(******************************************************************************)
(*   Copyright (C) 2014-2015 THALES Communication & Security                  *)
(*   All Rights Reserved                                                      *)
(*   European IST STANCE project (2011-2015)                                  *)
(*   author: Hugues Balp                                                      *)
(*                                                                            *)
(* This file completes the function's declarations generated by Callers with "definitions" members *)
(* It is issued from a copy/paste from the add_declarations.ml OCAML backend *)
(* The high-level specification of this backend can be formalized as follows: *)
(* V fct_def, ] fct_decl / fct_def.decl = fct_decl *)
(* with V = whatever & ] = there is *)
(* WARNING: several definitions can be found for the same declaration *)
(*  even if only one is tolerated during link edition *)
(* This is required to handle the general case where the same header *)
(* can be reused by different applications and build systems. *)
(******************************************************************************)

(* module Definition = Map.Make(String);; *)

type definitions = Definition of string list;;

class function_definition_json_parser (callee_json_filepath:string) = object(self)

  val callee_file_path : string = callee_json_filepath

  method search_defined_symbol_in_directories (fct_sign:string) (dir:Callers_t.dir) (dirfullpath:string) : (string * int) option =

    Printf.printf "Parse dir: %s\n" dirfullpath;
    Printf.printf "DEBUG dirfullpath: %s\n" dirfullpath;
    Printf.printf "================================================================================\n";

    let defined_symbols_filename : string = "defined_symbols.dir.callers.gen.json" in

    let defined_symbols_filepath : string = Printf.sprintf "%s/%s" dirfullpath defined_symbols_filename in

    Printf.printf "Read symbols defined in dir: %s\n" dirfullpath;

    let dir_symbols : Callers_t.dir_symbols option = self#read_defined_symbols_in_dir defined_symbols_filepath in

    let searched_symbol : (string * int) option =
      (
	match dir_symbols with
	| None -> None
	| Some dir_symbols ->
	  self#search_defined_symbol_in_dir fct_sign dir_symbols
      )
    in

    (match searched_symbol with

    | None -> (* Not yet found symbol, so we look for it in childrens directories *)
      (
	Printf.printf "Not found defined symbol \"%s\" in directory \"%s\", so we look for it in childrens directories\n" fct_sign dirfullpath;

	let searched_symbol : (string * int) option = 
	  (match dir.childrens with
	  | None -> None
	  | Some subdirs -> 

	    let searched_symbols : (string * int) option list = 
	      List.map
		(
		  fun (d:Callers_t.dir) -> 
		    let dirpath : string = Printf.sprintf "%s/%s" dirfullpath d.dir in
		    let searched_symbol = self#search_defined_symbol_in_directories fct_sign d dirpath in
		    searched_symbol
		)
		subdirs
	    in
	    let searched_symbol : (string * int) option = self#filter_found_symbol searched_symbols in
	    searched_symbol
	  )
	in
	searched_symbol
      )

    | Some found_symbol -> 
      (
	Printf.printf "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n";
	Printf.printf "FOUND symbol \"%s\" in directory \"%s\" !\n" fct_sign dirfullpath;
	Printf.printf "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n";
	searched_symbol
      )
    )

  (** Reads the symbols defined in input directory *)
  method read_defined_symbols_in_dir (defined_symbols_jsonfilepath:string) : Callers_t.dir_symbols option =

    let content = Common.read_json_file defined_symbols_jsonfilepath in
    (match content with
    | None -> None
    | Some content ->
      (
	Printf.printf "Reads the symbols defined in file \"%s\"\n" defined_symbols_jsonfilepath;
	(* Printf.printf "DEBUG parsed content:\n %s: \n" content; *)
	Printf.printf "ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n";
	(* list_defined_symbols content rootdir_fullpath all_symbols_jsonfile application_name *)
	let dir_symbols : Callers_t.dir_symbols = Callers_j.dir_symbols_of_string content in
	(* print_endline (Callers_j.string_of_dir_symbols dir_symbols); *)
	Some dir_symbols
      )
    )

  (** Return the location of the function declaration when defined in the root directory *)
  method search_declared_symbol (fct_sign:string) (rootdir_fullpath:string) : (string * int) option =

    Printf.printf "Return the location of function \"%s\" when found within root directory: \"%s\"" fct_sign rootdir_fullpath;

    let search_results : (string * int) option list  =
      List.map
	(
	  fun searched_dir_fullpath ->

	  (* Use the atdgen Yojson parser to parse the input directory tree json file *)
	  let jsondirext : string = "dir.callers.gen.json" in
	  let searched_dir_name : string = Filename.basename searched_dir_fullpath in
	  let searched_dir_jsoname : string = Printf.sprintf "%s/%s.%s" searched_dir_fullpath searched_dir_name jsondirext in
	  let searched_dir_content = Common.read_json_file searched_dir_jsoname in

	  (match searched_dir_content with
	   | None -> None
	   | Some searched_dir_content ->
	      (
		let searched_dir_tree : Callers_t.dir = Callers_j.dir_of_string searched_dir_content in
		(* Look for the symbol in all directories recursively. *)
		self#search_defined_symbol_in_directories fct_sign searched_dir_tree searched_dir_fullpath
	      )
	  )
	)
	[rootdir_fullpath]
    in

    let found_symbol : (string * int) option =
      try
	(
	  List.find
	    ( fun result ->
	      (
		match result with
		| None -> false
		| Some (symb_def_file, symb_def_line) ->
		   (
		     Printf.printf "add_definitions.ml: INFO::FOUND declaration of function \"%s\" in \"%s:%d\"\n" fct_sign symb_def_file symb_def_line;
		     true
		   )
	      )
	    )
	    search_results
	)
      with
	Not_found ->
	(
	  Printf.printf "add_definitions.ml::WARNING::NOT FOUND symbol \"%s\" in root directory \"%s\"\n" fct_sign rootdir_fullpath;
	  Printf.printf "The input defined symbols json file is incomplete.\n";
	  Printf.printf "The not found symbol is probably part of an external library.\n";
	  None
	)
    in
    found_symbol

  (** Return the location of the function declaration when defined in the input directory symbols table *)
  method search_defined_symbol_in_dir (fct_sign:string) (symbols:Callers_t.dir_symbols) : (string * int) option =

    Printf.printf "Search for the function's declaration \"%s\" in directory \"%s\"...\n" fct_sign symbols.directory;

    (* Look for the function definition among all functions defined in the json file *)
    let searched_symbols : (string * int) option list =
      List.map
      (
	fun (file : Callers_t.file) ->
	  (* Check whether the function is the searched one *)
	  let searched_symbol_def : (string * int) option =
	    try
	      (
		let searched_symbol : Callers_t.fct_def option =
		  (
		    match file.defined with
		    | None -> None
		    | Some symbols ->
		      Some (
			List.find
			  (
			    fun (fct : Callers_t.fct_def) ->
			    (* Printf.printf "DEBUG6: Check whether the function is the searched one: \"%s\" =?= \"%s\"\n" fct.sign fct_sign; *)
			    String.compare fct.sign fct_sign == 0
			  )
			  symbols
		      )
		  )
		in
		(match searched_symbol with
		| None -> None
		| Some found_symbol ->
		  (
		    (* Get the function declaration location *)
		    let symb_def_file : string = Printf.sprintf "%s/%s/%s" symbols.path symbols.directory file.file in
		    Printf.printf "INFO Found symbol \"%s\" in def=\"%s:%d\"\n" fct_sign symb_def_file found_symbol.line;
		    Some (symb_def_file, found_symbol.line)
		  )
		)
	      )
	    with
	      Not_found -> None
	  in
	  searched_symbol_def
      )
	symbols.file_symbols
    in
    self#filter_found_symbol searched_symbols

  method filter_found_symbol (searched_symbols : (string * int) option list) : (string * int) option =

    let searched_symbol : (string * int) option =
      try
	List.find
	  (
	    fun result ->
	      (* Check whether the function is the searched one *)
  	      (match result with
	      | None -> false
	      | Some _ -> true
	      )
	  )
	  searched_symbols
      with
	Not_found -> None
    in
    searched_symbol

  method parse_functions_definitions (json_filepath:string) (rootdir_fullpath:string) : Callers_t.file option =

    (* Use the atdgen Yojson parser *)
    let dirpath : string = Common.read_before_last '/' json_filepath in
    let filename : string = Common.read_after_last '/' 1 json_filepath in
    let jsoname_file = String.concat "" [ dirpath; "/"; filename; ".file.callers.gen.json" ] in
    let content = Common.read_json_file jsoname_file in
    (match content with
    | None -> None
    | Some content ->
      (
	(* Printf.printf "Read caller file \"%s\" content is:\n %s: \n" filename content; *)
	(* Printf.printf "atdgen parsed json file is :\n"; *)
	let file : Callers_t.file = Callers_j.file_of_string content in
	(* print_endline (Callers_j.string_of_file file); *)

	(* Parse the json functions contained in the current file *)
	let edited_functions:Callers_t.fct_decl list =

	  (match file.declared with
	  | None -> []
	  | Some fcts ->
	    (
	      (* Parses all defined function *)
	      let edited_functions : Callers_t.fct_decl list =

		List.map
  		  (
  		    fun (fct:Callers_t.fct_decl) ->
		    (
		      (* check where the function is really declared. *)
		      Printf.printf "Try to edit definition of function \"%s\" defined in file \"%s\"...\n" fct.sign file.file;

		      (* Check whether the definition declaration does already exists or not *)
		      let edited_definitions : definitions =
			(match fct.definitions with
			 | Some defs ->
			    (
			      (* Print any already existing definitions: *)
			      Printf.printf "ALREADY EXISTING definition(s) for declaration: sign=\"%s\", line=\"%d\"\n" fct.sign fct.line;
			      List.iter
				(
				  fun def -> Printf.printf " def=\"%s\"\n" def
				)
				defs;
			      (* Check whether the current definition does already exists or not *)
			      raise Common.TBC;
			      Definition defs
			    )
			 | None ->
			    (
			      (* Location of definition is not yet known. *)
			      Printf.printf "No already existing definition for function implementation: sign=\"%s\", line=\"%d\", decl=?\n" fct.sign fct.line;
			      (Printf.printf "Try to look for symbol \"%s\" in the root directory \"%s\"...\n" fct.sign rootdir_fullpath;
			       let search_result : (string * int) option = self#search_declared_symbol fct.sign rootdir_fullpath
			       in
			       (match search_result with
				| Some (def_file, def_line) ->
				   (
				     (* Check whether the declaration is local to the caller file or external. *)
				     (* Printf.printf "add_definitions.ml::INFO::Check whether the declaration is local to the caller file or external.\n"; *)
				     (* Printf.printf "symb_def_file: %s\n" def_file; *)
				     (* Printf.printf "caller_file: %s\n" json_filepath; *)
				     let def : string = Printf.sprintf "%s:%d" def_file def_line in
				     let decl : string = Printf.sprintf "%s:%d" file.file fct.line in

                                     let decl = Common.filter_root_dir decl in
                                     let decl = Common.filter_json_file_suffix Common.json_file_suffix decl in

                                     let def = Common.filter_root_dir def in
                                     let def = Common.filter_json_file_suffix Common.json_file_suffix def in

				     (* Make sure the def is wellformed or not *)
				     (match def with
				      | "" -> raise Common.Malformed_Definition_Declaration
				      | _ -> ());
				     if String.compare def_file json_filepath == 0 then
				       (
					 Printf.printf "add_definitions.ml::INFO::the definition is local to the declaration's file\n";
				       )
				     else
				       (
					 Printf.printf "add_definitions.ml::INFO::the definition is extern to the declaration's file, so edit its declaration: new value is \"%s\"\n" def
				       );
				     let (edited_definitions : definitions) = Definition [def]
				     in
				     Printf.printf "EDITED definition: sign=\"%s\", decl=\"%s\", def=\"%s\"\n" fct.sign decl def;
				     edited_definitions
				   )
				| None ->
				   (
				     Printf.printf "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\n";
				     Printf.printf "add_definitions.ml::WARNING::Not found symbol \"%s\" in root directory \"%s\"\n"
						   fct.sign rootdir_fullpath;
				     Printf.printf "The not found symbol is probably part of another external library.\n";
				     Printf.printf "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\n";

				     let definition_def =
				       (match fct.virtuality with
					| Some "pure" -> "none"
					| _ -> "unlinkedDefinition"
				       )
				     in
				     let declaration_def = "unlinkedDeclaration" in
				     (* Keep the input excallee unchanged *)
				     let (edited_definitions : definitions) = Definition [definition_def]
				     in
				     Printf.printf "NOT FOUND definition: sign=\"%s\", decl=%s, def=%s\n" fct.sign definition_def declaration_def;
				     edited_definitions
				   )
			       )
			      )
			    )
			)
		      in
		      let edited_definitions : string list =
			(match edited_definitions with
			   | Definition d ->
			      List.filter
				(
				  fun (def:string) ->
				  (
				    match def with
				     | "none" -> false
				     | _ -> true
				  )
				)
				d
			)
		      in
		      let edited_declaration : Callers_t.fct_decl =
			{
  			  sign = fct.sign;
  			  line = fct.line;
			  virtuality = fct.virtuality;
                          mangled = fct.mangled;
			  redeclarations = fct.redeclarations;
			  definitions = Some edited_definitions;
			  redeclared = fct.redeclared;
  			  locallers = fct.locallers;
  			  extcallers = fct.extcallers;
                          recordName = fct.recordName;
                          recordPath = fct.recordPath;
                          threads = fct.threads;
			}
		      in
		      edited_declaration
		    )
		  )
		  fcts
	      in
	      edited_functions
	    )
	  )
	in

	let edited_file : Callers_t.file =
	  {
	    file = file.file;
            kind = file.kind;
	    path = file.path;
	    namespaces = file.namespaces;
	    records = file.records;
            threads = file.threads;
	    declared = Some edited_functions;
	    defined = file.defined;
	  }
	in
	Some edited_file
      )
    )
end

(* Anonymous argument *)
let spec =
  let open Core.Std.Command.Spec in
  empty
  +> anon ("file_json" %: string)
  +> anon ("rootdir_fullpath" %: string)

(* Basic command *)
let command =
  Core.Std.Command.basic
    ~summary:"Completes function declarations with definitions in generated json files"
    ~readme:(fun () -> "More detailed information")
    spec
    (
      fun file_json rootdir_fullpath () ->
	try
	  (
	    let parser = new function_definition_json_parser file_json in
	    let edited_file = parser#parse_functions_definitions file_json rootdir_fullpath in
	    (match edited_file with
	    | None -> ()
	    | Some edited_file ->
	      (
		(* let jsoname_file = String.concat "." [ file_json; "edited.debug.json" ] in *)
		let jsoname_file = String.concat "" [ file_json; ".file.callers.gen.json" ] in
		Callers.print_callers_file edited_file jsoname_file
	      )
	    )
	  )
	with
	| Common.File_Not_Found _ -> raise Common.Usage_Error
	| _ ->
	  (
	    Printf.printf "add_definitions::ERROR::unexpected error\n";
	    raise Common.Unexpected_Error
	  )
    )

(* Running Basic Commands *)
let () =
  Core.Std.Command.run ~version:"1.0" ~build_info:"RWO" command

(* Local Variables: *)
(* mode: tuareg *)
(* compile-command: "ocamlbuild -use-ocamlfind -package atdgen -package core -package batteries -tag thread add_definitions.native" *)
(* End: *)
